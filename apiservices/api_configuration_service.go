/*
 * Thingdust app API
 *
 * API to access and configure the Thingdust app
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package apiservices

import (
	"context"
	"errors"
	"net/http"
	"thingdust/apiserver"
)

// ConfigurationApiService is a service that implements the logic for the ConfigurationApiServicer
// This service should implement the business logic for every endpoint for the ConfigurationApi API.
// Include any external packages or services that will be required by this service.
type ConfigurationApiService struct {
}

// NewConfigurationApiService creates a default api service
func NewConfigurationApiService() apiserver.ConfigurationApiServicer {
	return &ConfigurationApiService{}
}

// DeleteConfigurationById - Deletes an endpoint
func (s *ConfigurationApiService) DeleteConfigurationById(ctx context.Context, configId int64) (apiserver.ImplResponse, error) {
	// TODO - update DeleteConfigurationById with the required logic for this service method.
	// Add api_configuration_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(204, {}) or use other options such as http.Ok ...
	//return Response(204, nil),nil

	return apiserver.Response(http.StatusNotImplemented, nil), errors.New("DeleteConfigurationById method not implemented")
}

// GetConfigurationById - Get endpoint
func (s *ConfigurationApiService) GetConfigurationById(ctx context.Context, configId int64) (apiserver.ImplResponse, error) {
	// TODO - update GetConfigurationById with the required logic for this service method.
	// Add api_configuration_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, Configuration{}) or use other options such as http.Ok ...
	//return Response(200, Configuration{}), nil

	return apiserver.Response(http.StatusNotImplemented, nil), errors.New("GetConfigurationById method not implemented")
}

// GetConfigurations - Get all endpoint configurations
func (s *ConfigurationApiService) GetConfigurations(ctx context.Context) (apiserver.ImplResponse, error) {
	// TODO - update GetConfigurations with the required logic for this service method.
	// Add api_configuration_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, []Configuration{}) or use other options such as http.Ok ...
	//return Response(200, []Configuration{}), nil

	return apiserver.Response(http.StatusNotImplemented, nil), errors.New("GetConfigurations method not implemented")
}

// PostConfiguration - Creates an example configuration
func (s *ConfigurationApiService) PostConfiguration(ctx context.Context, configuration apiserver.Configuration) (apiserver.ImplResponse, error) {
	// TODO - update PostConfiguration with the required logic for this service method.
	// Add api_configuration_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(201, Configuration{}) or use other options such as http.Ok ...
	//return Response(201, Configuration{}), nil

	return apiserver.Response(http.StatusNotImplemented, nil), errors.New("PostConfiguration method not implemented")
}

// PutConfigurationById - Updates an endpoint
func (s *ConfigurationApiService) PutConfigurationById(ctx context.Context, configId int64, configuration apiserver.Configuration) (apiserver.ImplResponse, error) {
	// TODO - update PutConfigurationById with the required logic for this service method.
	// Add api_configuration_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, Configuration{}) or use other options such as http.Ok ...
	//return Response(200, Configuration{}), nil

	return apiserver.Response(http.StatusNotImplemented, nil), errors.New("PutConfigurationById method not implemented")
}
