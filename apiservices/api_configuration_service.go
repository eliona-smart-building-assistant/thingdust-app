/*
 * Thingdust app API
 *
 * API to access and configure the Thingdust app
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package apiservices

import (
	"context"
	//"errors"
	"net/http"
	"thingdust/apiserver"
	"thingdust/conf"
)

// ConfigurationApiService is a service that implements the logic for the ConfigurationApiServicer
// This service should implement the business logic for every endpoint for the ConfigurationApi API.
// Include any external packages or services that will be required by this service.
type ConfigurationApiService struct {
}

// NewConfigurationApiService creates a default api service
func NewConfigurationApiService() apiserver.ConfigurationApiServicer {
	return &ConfigurationApiService{}
}

// DeleteConfigurationById - Deletes an endpoint
func (s *ConfigurationApiService) DeleteConfigurationById(ctx context.Context, configId int64) (apiserver.ImplResponse, error) {

	count, err := conf.DeleteConfig(ctx, configId)
	if err != nil {
		return apiserver.ImplResponse{Code: http.StatusInternalServerError}, err
	}
	if count == 0 {
		return apiserver.ImplResponse{Code: http.StatusNotFound}, err
	}
	return apiserver.ImplResponse{Code: http.StatusNoContent}, err

}

// GetConfigurationById - Get endpoint
func (s *ConfigurationApiService) GetConfigurationById(ctx context.Context, configId int64) (apiserver.ImplResponse, error) {

	config, err := conf.GetConfig(context.Background(), configId)
	if err != nil {
		return apiserver.ImplResponse{Code: http.StatusInternalServerError}, err
	}
	if config == nil {
		return apiserver.ImplResponse{Code: http.StatusNotFound}, err
	}
	return apiserver.Response(http.StatusOK, config), nil

}

// GetConfigurations - Get all endpoint configurations
func (s *ConfigurationApiService) GetConfigurations(ctx context.Context) (apiserver.ImplResponse, error) {

	configs, err := conf.GetConfigs(ctx)
	if err != nil {
		return apiserver.ImplResponse{Code: http.StatusInternalServerError}, err
	}
	return apiserver.Response(http.StatusOK, configs), nil

}

// PostConfiguration - Creates an example configuration
func (s *ConfigurationApiService) PostConfiguration(ctx context.Context, configuration apiserver.Configuration) (apiserver.ImplResponse, error) {

	insertedConfig, err := conf.InsertConfig(ctx, configuration)
	if err != nil {
		return apiserver.ImplResponse{Code: http.StatusInternalServerError}, err
	}
	return apiserver.Response(http.StatusCreated, insertedConfig), nil

}

// PutConfigurationById - Updates an endpoint
func (s *ConfigurationApiService) PutConfigurationById(ctx context.Context, configId int64, configuration apiserver.Configuration) (apiserver.ImplResponse, error) {

	upsertedConfig, err := conf.UpsertConfigById(ctx, configId, configuration)
	if err != nil {
		return apiserver.ImplResponse{Code: http.StatusInternalServerError}, err
	}
	return apiserver.Response(http.StatusCreated, upsertedConfig), nil

}
