/*
 * Thingdust app API
 *
 * API to access and configure the Thingdust app
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package apiserver

import (
	"net/http"
	"strings"
)

// SpacesApiController binds http requests to an api service and writes the service results to the http response
type SpacesApiController struct {
	service      SpacesApiServicer
	errorHandler ErrorHandler
}

// SpacesApiOption for how the controller is set up.
type SpacesApiOption func(*SpacesApiController)

// WithSpacesApiErrorHandler inject ErrorHandler into controller
func WithSpacesApiErrorHandler(h ErrorHandler) SpacesApiOption {
	return func(c *SpacesApiController) {
		c.errorHandler = h
	}
}

// NewSpacesApiController creates a default api controller
func NewSpacesApiController(s SpacesApiServicer, opts ...SpacesApiOption) Router {
	controller := &SpacesApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SpacesApiController
func (c *SpacesApiController) Routes() Routes {
	return Routes{
		{
			"GetSpaces",
			strings.ToUpper("Get"),
			"/v1/spaces",
			c.GetSpaces,
		},
	}
}

// GetSpaces - List all spaces mapped to eliona assets
func (c *SpacesApiController) GetSpaces(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	configIdParam, err := parseInt64Parameter(query.Get("configId"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetSpaces(r.Context(), configIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
