/*
 * Thingdust app API
 *
 * API to access and configure the Thingdust app
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package apiserver

// Configuration - Each configuration defines access to a thingdust endpoint.
type Configuration struct {

	// Internal identifier for the configured endpoint (created automatically). This identifier always has to be used if you remove or update existing configured endpoints.
	ConfigId int64 `json:"configId,omitempty"`

	// Address of the endpoint.
	ApiEndpoint string `json:"apiEndpoint,omitempty"`

	// Key for the endpoint.
	ApiKey string `json:"apiKey,omitempty"`

	// Flag to enable or disable the endpoint
	Enable *bool `json:"enable,omitempty"`

	// Interval in seconds for collecting data from endpoint
	RefreshInterval int32 `json:"refreshInterval,omitempty"`

	// Timeout in seconds for server
	RequestTimeout int32 `json:"requestTimeout,omitempty"`

	// Set to `true` by the app when running and to `false` when app is stopped
	Active bool `json:"active,omitempty"`

	// List of Eliona project ids for which this endpoint should collect data. For each project id all smart devices are automatically created as an asset in Eliona. The mapping between Eliona is stored as an asset mapping in the thingdust app and can be read with the SpaceMapping endpoint.
	ProjIds *[]string `json:"projIds,omitempty"`
}

// AssertConfigurationRequired checks if the required fields are not zero-ed
func AssertConfigurationRequired(obj Configuration) error {
	return nil
}

// AssertRecurseConfigurationRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Configuration (e.g. [][]Configuration), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseConfigurationRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aConfiguration, ok := obj.(Configuration)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertConfigurationRequired(aConfiguration)
	})
}
