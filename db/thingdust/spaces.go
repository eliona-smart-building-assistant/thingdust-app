// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbthingdust

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Space is an object representing the database table.
type Space struct {
	ConfigID  int64  `boil:"config_id" json:"config_id" toml:"config_id" yaml:"config_id"`
	ProjectID string `boil:"project_id" json:"project_id" toml:"project_id" yaml:"project_id"`
	AssetID   int32  `boil:"asset_id" json:"asset_id" toml:"asset_id" yaml:"asset_id"`
	SpaceName string `boil:"space_name" json:"space_name" toml:"space_name" yaml:"space_name"`

	R *spaceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L spaceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SpaceColumns = struct {
	ConfigID  string
	ProjectID string
	AssetID   string
	SpaceName string
}{
	ConfigID:  "config_id",
	ProjectID: "project_id",
	AssetID:   "asset_id",
	SpaceName: "space_name",
}

var SpaceTableColumns = struct {
	ConfigID  string
	ProjectID string
	AssetID   string
	SpaceName string
}{
	ConfigID:  "spaces.config_id",
	ProjectID: "spaces.project_id",
	AssetID:   "spaces.asset_id",
	SpaceName: "spaces.space_name",
}

// Generated where

type whereHelperint32 struct{ field string }

func (w whereHelperint32) EQ(x int32) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint32) NEQ(x int32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint32) LT(x int32) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint32) LTE(x int32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint32) GT(x int32) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint32) GTE(x int32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint32) IN(slice []int32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint32) NIN(slice []int32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var SpaceWhere = struct {
	ConfigID  whereHelperint64
	ProjectID whereHelperstring
	AssetID   whereHelperint32
	SpaceName whereHelperstring
}{
	ConfigID:  whereHelperint64{field: "\"thingdust\".\"spaces\".\"config_id\""},
	ProjectID: whereHelperstring{field: "\"thingdust\".\"spaces\".\"project_id\""},
	AssetID:   whereHelperint32{field: "\"thingdust\".\"spaces\".\"asset_id\""},
	SpaceName: whereHelperstring{field: "\"thingdust\".\"spaces\".\"space_name\""},
}

// SpaceRels is where relationship names are stored.
var SpaceRels = struct {
}{}

// spaceR is where relationships are stored.
type spaceR struct {
}

// NewStruct creates a new relationship struct
func (*spaceR) NewStruct() *spaceR {
	return &spaceR{}
}

// spaceL is where Load methods for each relationship are stored.
type spaceL struct{}

var (
	spaceAllColumns            = []string{"config_id", "project_id", "asset_id", "space_name"}
	spaceColumnsWithoutDefault = []string{"config_id", "project_id", "asset_id", "space_name"}
	spaceColumnsWithDefault    = []string{}
	spacePrimaryKeyColumns     = []string{"config_id", "project_id", "asset_id", "space_name"}
	spaceGeneratedColumns      = []string{}
)

type (
	// SpaceSlice is an alias for a slice of pointers to Space.
	// This should almost always be used instead of []Space.
	SpaceSlice []*Space
	// SpaceHook is the signature for custom Space hook methods
	SpaceHook func(context.Context, boil.ContextExecutor, *Space) error

	spaceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	spaceType                 = reflect.TypeOf(&Space{})
	spaceMapping              = queries.MakeStructMapping(spaceType)
	spacePrimaryKeyMapping, _ = queries.BindMapping(spaceType, spaceMapping, spacePrimaryKeyColumns)
	spaceInsertCacheMut       sync.RWMutex
	spaceInsertCache          = make(map[string]insertCache)
	spaceUpdateCacheMut       sync.RWMutex
	spaceUpdateCache          = make(map[string]updateCache)
	spaceUpsertCacheMut       sync.RWMutex
	spaceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var spaceAfterSelectHooks []SpaceHook

var spaceBeforeInsertHooks []SpaceHook
var spaceAfterInsertHooks []SpaceHook

var spaceBeforeUpdateHooks []SpaceHook
var spaceAfterUpdateHooks []SpaceHook

var spaceBeforeDeleteHooks []SpaceHook
var spaceAfterDeleteHooks []SpaceHook

var spaceBeforeUpsertHooks []SpaceHook
var spaceAfterUpsertHooks []SpaceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Space) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range spaceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Space) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range spaceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Space) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range spaceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Space) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range spaceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Space) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range spaceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Space) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range spaceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Space) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range spaceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Space) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range spaceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Space) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range spaceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSpaceHook registers your hook function for all future operations.
func AddSpaceHook(hookPoint boil.HookPoint, spaceHook SpaceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		spaceAfterSelectHooks = append(spaceAfterSelectHooks, spaceHook)
	case boil.BeforeInsertHook:
		spaceBeforeInsertHooks = append(spaceBeforeInsertHooks, spaceHook)
	case boil.AfterInsertHook:
		spaceAfterInsertHooks = append(spaceAfterInsertHooks, spaceHook)
	case boil.BeforeUpdateHook:
		spaceBeforeUpdateHooks = append(spaceBeforeUpdateHooks, spaceHook)
	case boil.AfterUpdateHook:
		spaceAfterUpdateHooks = append(spaceAfterUpdateHooks, spaceHook)
	case boil.BeforeDeleteHook:
		spaceBeforeDeleteHooks = append(spaceBeforeDeleteHooks, spaceHook)
	case boil.AfterDeleteHook:
		spaceAfterDeleteHooks = append(spaceAfterDeleteHooks, spaceHook)
	case boil.BeforeUpsertHook:
		spaceBeforeUpsertHooks = append(spaceBeforeUpsertHooks, spaceHook)
	case boil.AfterUpsertHook:
		spaceAfterUpsertHooks = append(spaceAfterUpsertHooks, spaceHook)
	}
}

// OneG returns a single space record from the query using the global executor.
func (q spaceQuery) OneG(ctx context.Context) (*Space, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single space record from the query.
func (q spaceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Space, error) {
	o := &Space{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbthingdust: failed to execute a one query for spaces")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Space records from the query using the global executor.
func (q spaceQuery) AllG(ctx context.Context) (SpaceSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Space records from the query.
func (q spaceQuery) All(ctx context.Context, exec boil.ContextExecutor) (SpaceSlice, error) {
	var o []*Space

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbthingdust: failed to assign all query results to Space slice")
	}

	if len(spaceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Space records in the query using the global executor
func (q spaceQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Space records in the query.
func (q spaceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbthingdust: failed to count spaces rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q spaceQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q spaceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbthingdust: failed to check if spaces exists")
	}

	return count > 0, nil
}

// Spaces retrieves all the records using an executor.
func Spaces(mods ...qm.QueryMod) spaceQuery {
	mods = append(mods, qm.From("\"thingdust\".\"spaces\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"thingdust\".\"spaces\".*"})
	}

	return spaceQuery{q}
}

// FindSpaceG retrieves a single record by ID.
func FindSpaceG(ctx context.Context, configID int64, projectID string, assetID int32, spaceName string, selectCols ...string) (*Space, error) {
	return FindSpace(ctx, boil.GetContextDB(), configID, projectID, assetID, spaceName, selectCols...)
}

// FindSpace retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSpace(ctx context.Context, exec boil.ContextExecutor, configID int64, projectID string, assetID int32, spaceName string, selectCols ...string) (*Space, error) {
	spaceObj := &Space{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"thingdust\".\"spaces\" where \"config_id\"=$1 AND \"project_id\"=$2 AND \"asset_id\"=$3 AND \"space_name\"=$4", sel,
	)

	q := queries.Raw(query, configID, projectID, assetID, spaceName)

	err := q.Bind(ctx, exec, spaceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbthingdust: unable to select from spaces")
	}

	if err = spaceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return spaceObj, err
	}

	return spaceObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Space) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Space) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbthingdust: no spaces provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(spaceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	spaceInsertCacheMut.RLock()
	cache, cached := spaceInsertCache[key]
	spaceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			spaceAllColumns,
			spaceColumnsWithDefault,
			spaceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(spaceType, spaceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(spaceType, spaceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"thingdust\".\"spaces\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"thingdust\".\"spaces\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbthingdust: unable to insert into spaces")
	}

	if !cached {
		spaceInsertCacheMut.Lock()
		spaceInsertCache[key] = cache
		spaceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Space record using the global executor.
// See Update for more documentation.
func (o *Space) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Space.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Space) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	spaceUpdateCacheMut.RLock()
	cache, cached := spaceUpdateCache[key]
	spaceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			spaceAllColumns,
			spacePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbthingdust: unable to update spaces, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"thingdust\".\"spaces\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, spacePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(spaceType, spaceMapping, append(wl, spacePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbthingdust: unable to update spaces row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbthingdust: failed to get rows affected by update for spaces")
	}

	if !cached {
		spaceUpdateCacheMut.Lock()
		spaceUpdateCache[key] = cache
		spaceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q spaceQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q spaceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbthingdust: unable to update all for spaces")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbthingdust: unable to retrieve rows affected for spaces")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o SpaceSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SpaceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbthingdust: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), spacePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"thingdust\".\"spaces\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, spacePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbthingdust: unable to update all in space slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbthingdust: unable to retrieve rows affected all in update all space")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Space) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Space) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbthingdust: no spaces provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(spaceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	spaceUpsertCacheMut.RLock()
	cache, cached := spaceUpsertCache[key]
	spaceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			spaceAllColumns,
			spaceColumnsWithDefault,
			spaceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			spaceAllColumns,
			spacePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbthingdust: unable to upsert spaces, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(spacePrimaryKeyColumns))
			copy(conflict, spacePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"thingdust\".\"spaces\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(spaceType, spaceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(spaceType, spaceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbthingdust: unable to upsert spaces")
	}

	if !cached {
		spaceUpsertCacheMut.Lock()
		spaceUpsertCache[key] = cache
		spaceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Space record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Space) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Space record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Space) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbthingdust: no Space provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), spacePrimaryKeyMapping)
	sql := "DELETE FROM \"thingdust\".\"spaces\" WHERE \"config_id\"=$1 AND \"project_id\"=$2 AND \"asset_id\"=$3 AND \"space_name\"=$4"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbthingdust: unable to delete from spaces")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbthingdust: failed to get rows affected by delete for spaces")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q spaceQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q spaceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbthingdust: no spaceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbthingdust: unable to delete all from spaces")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbthingdust: failed to get rows affected by deleteall for spaces")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o SpaceSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SpaceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(spaceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), spacePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"thingdust\".\"spaces\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, spacePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbthingdust: unable to delete all from space slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbthingdust: failed to get rows affected by deleteall for spaces")
	}

	if len(spaceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Space) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbthingdust: no Space provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Space) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSpace(ctx, exec, o.ConfigID, o.ProjectID, o.AssetID, o.SpaceName)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SpaceSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbthingdust: empty SpaceSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SpaceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SpaceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), spacePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"thingdust\".\"spaces\".* FROM \"thingdust\".\"spaces\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, spacePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbthingdust: unable to reload all in SpaceSlice")
	}

	*o = slice

	return nil
}

// SpaceExistsG checks if the Space row exists.
func SpaceExistsG(ctx context.Context, configID int64, projectID string, assetID int32, spaceName string) (bool, error) {
	return SpaceExists(ctx, boil.GetContextDB(), configID, projectID, assetID, spaceName)
}

// SpaceExists checks if the Space row exists.
func SpaceExists(ctx context.Context, exec boil.ContextExecutor, configID int64, projectID string, assetID int32, spaceName string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"thingdust\".\"spaces\" where \"config_id\"=$1 AND \"project_id\"=$2 AND \"asset_id\"=$3 AND \"space_name\"=$4 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, configID, projectID, assetID, spaceName)
	}
	row := exec.QueryRowContext(ctx, sql, configID, projectID, assetID, spaceName)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbthingdust: unable to check if spaces exists")
	}

	return exists, nil
}

// Exists checks if the Space row exists.
func (o *Space) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SpaceExists(ctx, exec, o.ConfigID, o.ProjectID, o.AssetID, o.SpaceName)
}
